
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000324  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b71  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000684  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a2  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:


void	DIO_voidSetPinDirection(u8 Port ,u8 Pin , u8 Direction )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	a1 f5       	brne	.+104    	; 0xe4 <DIO_voidSetPinDirection+0x78>
		{
			switch(Port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <DIO_voidSetPinDirection+0x36>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <DIO_voidSetPinDirection+0x62>
  8a:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,Pin);	break;
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,Pin);	break;
  a2:	27 b3       	in	r18, 0x17	; 23
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinDirection+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinDirection+0x3e>
  b2:	82 2b       	or	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,Pin);	break;
  b8:	24 b3       	in	r18, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,Pin);	break;
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x6a>
  de:	82 2b       	or	r24, r18
  e0:	81 bb       	out	0x11, r24	; 17
  e2:	08 95       	ret
			}
		}
		else if (Direction == INPUT)
  e4:	41 11       	cpse	r20, r1
  e6:	37 c0       	rjmp	.+110    	; 0x156 <DIO_voidSetPinDirection+0xea>
		{
			switch(Port)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 f0       	breq	.+36     	; 0x110 <DIO_voidSetPinDirection+0xa4>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	d9 f0       	breq	.+54     	; 0x128 <DIO_voidSetPinDirection+0xbc>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f1       	breq	.+74     	; 0x140 <DIO_voidSetPinDirection+0xd4>
  f6:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,Pin);	break;
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x94>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,Pin);	break;
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0xac>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,Pin);	break;
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,Pin);	break;
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_voidSetPinValue>:
	}
}
void	DIO_voidSetPinValue(u8 Port ,u8 Pin , u8 Value )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_voidSetPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_voidSetPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_voidSetPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	a1 f5       	brne	.+104    	; 0x1d0 <DIO_voidSetPinValue+0x78>
		{
			switch(Port)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	89 f0       	breq	.+34     	; 0x18e <DIO_voidSetPinValue+0x36>
 16c:	28 f0       	brcs	.+10     	; 0x178 <DIO_voidSetPinValue+0x20>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	c9 f0       	breq	.+50     	; 0x1a4 <DIO_voidSetPinValue+0x4c>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	11 f1       	breq	.+68     	; 0x1ba <DIO_voidSetPinValue+0x62>
 176:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,Pin);	break;
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_voidSetPinValue+0x2c>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_voidSetPinValue+0x28>
 188:	82 2b       	or	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,Pin);	break;
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinValue+0x42>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinValue+0x3e>
 19e:	82 2b       	or	r24, r18
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,Pin);	break;
 1a4:	25 b3       	in	r18, 0x15	; 21
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_voidSetPinValue+0x58>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_voidSetPinValue+0x54>
 1b4:	82 2b       	or	r24, r18
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,Pin);	break;
 1ba:	22 b3       	in	r18, 0x12	; 18
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x6e>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x6a>
 1ca:	82 2b       	or	r24, r18
 1cc:	82 bb       	out	0x12, r24	; 18
 1ce:	08 95       	ret
			}
		}
		else if (Value == LOW)
 1d0:	41 11       	cpse	r20, r1
 1d2:	37 c0       	rjmp	.+110    	; 0x242 <DIO_voidSetPinValue+0xea>
		{
			switch(Port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 f0       	breq	.+36     	; 0x1fc <DIO_voidSetPinValue+0xa4>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_voidSetPinValue+0x8c>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	d9 f0       	breq	.+54     	; 0x214 <DIO_voidSetPinValue+0xbc>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	29 f1       	breq	.+74     	; 0x22c <DIO_voidSetPinValue+0xd4>
 1e2:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,Pin);	break;
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0x94>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,Pin);	break;
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0xb0>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0xac>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,Pin);	break;
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0xc8>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0xc4>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,Pin);	break;
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:

int main(void)
{
	u8 data;																	//Variable for storing the data received from Virtual Terminal
	
	SPI_Init();																	//SPI initialization
 244:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_Init>
	USART_Init();																//USART initialization
 248:	0e 94 6e 01 	call	0x2dc	; 0x2dc <USART_Init>
												
	DIO_voidSetPinDirection(PORTB,PIN5,OUTPUT);									//MOSI Pin Output			
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	65 e0       	ldi	r22, 0x05	; 5
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN6,INPUT);									//MISO Pin Input
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN0,OUTPUT);									//LED For Indicating that the data has been sent 
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN7,OUTPUT);									//Clock Pin Output
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN3,OUTPUT);									//Chip Selection Pin Output
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	 
															
    while (1) 
    {
		data=USART_ReceiveByte();												//Storing the data received from the Virtual Terminal in data Variable
 27e:	0e 94 8c 01 	call	0x318	; 0x318 <USART_ReceiveByte>
		SPI_Transmit(data);														//Sending the data to MCU2 via SPI
 282:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPI_Transmit>
		
/*		LED Blinking for Indicating that the data has been sent					*/		
		DIO_voidSetPinValue(PORTC,PIN0,HIGH);								
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	80 e7       	ldi	r24, 0x70	; 112
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x52>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x5c>
 2a0:	00 00       	nop
		_delay_ms(50);
		DIO_voidSetPinValue(PORTC,PIN0,LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
 2ac:	e8 cf       	rjmp	.-48     	; 0x27e <main+0x3a>

000002ae <SPI_Init>:
u8 			SPI_Receive(void)
{
    while((GET_BIT(SPSR, 7))==0);
	return SPDR;
	
}
 2ae:	8d b1       	in	r24, 0x0d	; 13
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8d b9       	out	0x0d, r24	; 13
 2b4:	8d b1       	in	r24, 0x0d	; 13
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	8d b9       	out	0x0d, r24	; 13
 2ba:	8d b1       	in	r24, 0x0d	; 13
 2bc:	87 7f       	andi	r24, 0xF7	; 247
 2be:	8d b9       	out	0x0d, r24	; 13
 2c0:	8d b1       	in	r24, 0x0d	; 13
 2c2:	8b 7f       	andi	r24, 0xFB	; 251
 2c4:	8d b9       	out	0x0d, r24	; 13
 2c6:	8e b1       	in	r24, 0x0e	; 14
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	8e b9       	out	0x0e, r24	; 14
 2cc:	8d b1       	in	r24, 0x0d	; 13
 2ce:	8f 7d       	andi	r24, 0xDF	; 223
 2d0:	8d b9       	out	0x0d, r24	; 13
 2d2:	08 95       	ret

000002d4 <SPI_Transmit>:

void 		SPI_Transmit(u8 Data)
{
	SPDR = Data;
 2d4:	8f b9       	out	0x0f, r24	; 15
	while((GET_BIT(SPSR, 7))==0);
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <SPI_Transmit+0x2>
}
 2da:	08 95       	ret

000002dc <USART_Init>:
	while(str[i] != '\0')
	{
		USART_SendByte(str[i]);
		i++;
	}
}
 2dc:	8a b1       	in	r24, 0x0a	; 10
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	8a b9       	out	0x0a, r24	; 10
 2e2:	8a b1       	in	r24, 0x0a	; 10
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8a b9       	out	0x0a, r24	; 10
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 2fc:	8b b1       	in	r24, 0x0b	; 11
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	8b b9       	out	0x0b, r24	; 11
 302:	8a b1       	in	r24, 0x0a	; 10
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	8a b9       	out	0x0a, r24	; 10
 308:	80 b5       	in	r24, 0x20	; 32
 30a:	80 bd       	out	0x20, r24	; 32
 30c:	10 bc       	out	0x20, r1	; 32
 30e:	85 ec       	ldi	r24, 0xC5	; 197
 310:	89 b9       	out	0x09, r24	; 9
 312:	86 e8       	ldi	r24, 0x86	; 134
 314:	80 bd       	out	0x20, r24	; 32
 316:	08 95       	ret

00000318 <USART_ReceiveByte>:

u8  	USART_ReceiveByte(void) 
{
	while ((GET_BIT(UCSRA, 7))== 0);
 318:	5f 9b       	sbis	0x0b, 7	; 11
 31a:	fe cf       	rjmp	.-4      	; 0x318 <USART_ReceiveByte>
	return UDR;
 31c:	8c b1       	in	r24, 0x0c	; 12
	CLR_BIT(UCSRA,7); 							 //Clear Flag
}
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
